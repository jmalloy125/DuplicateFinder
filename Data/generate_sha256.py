import os
import hashlib
from concurrent.futures import ThreadPoolExecutor

# generate_sha256 creates a ThreadPool to iterate over all files in the selected directory
# It then converts the file contents to a sha256 value, then adds the value as a Future to the futures list.
# the format of items in the futures list is ["sha256", "path_to_file"]
def generate_sha256(directory):
    futures = []
    files = (os.listdir(directory))
    pool = ThreadPoolExecutor(os.cpu_count()-1)
    for file in files:
        path = f"{directory}/{file}"
        futures.append(pool.submit(sha256_worker, path))
    pool.shutdown(wait=True)
    return futures


# find_duplicates takes a [futures] generated by generate_sha256.
# This [futures] list contains all the files found in the selected dir, converted to a sha256 value
# in the format of ["sha256value", "path_to_file"]
# It then iterates over this list to build a dict of {"sha256": ["path_to_file"]}
# If the key already exists, it appends the file path for the duplicate key to the Value of that sha256 key.
# Next, it iterates over the created dict and finds any key, value pairs that have a len(value) > 1,
# indicating a duplicate file.
# It then creates a list of all duplicate files and returns that list.
def find_duplicates(futures):
    builder = {}
    duplicates = []
    for future in futures:
        if future.result()[0] not in builder:
            builder[future.result()[0]] = [future.result()[1]]
        else:
            builder[future.result()[0]].append(future.result()[1])
    for paths_list in builder.values():
        if len(paths_list) > 1:
            for duplicate in paths_list[1:]:
                duplicates.append(duplicate)
    return duplicates


#sha256_worker takes a "path_to_file" from the ThreadPool and converts the file contents to a sha256 value.
def sha256_worker(path):
    with open(path, 'rb') as f:
        bytes = f.read()
        readable_hash = hashlib.sha256(bytes).hexdigest()
        return [readable_hash, path]

